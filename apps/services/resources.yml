DefaultExecutionPolicy:
  Type: AWS::IAM::Policy
  Properties:
    PolicyName: DefaultExecutionPolicy
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow # note that these rights are given in the default policy and are required if you want logs out of your lambda(s)
          Action:
            - logs:GetLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:DescribeSubscriptionFilters
            - logs:DescribeMetricFilters
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:TagResource
            - logs:PutMetricFilter
            - logs:FilterLogEvents
          Resource: !Join
            - ':'
            - - 'arn:aws:logs'
              - !Ref AWS::Region
              - !Ref AWS::AccountId
              - 'log-group:/aws/lambda/*:*:*'
    Roles:
      - !Ref FileChunkerRole
      - !Ref ChunkLoaderRole
      - !Ref ChunkProcessorRole
      - !Ref SignedUrlRole
SignedUrlRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: SignedUrlRole # required while using 'serverless deploy --function' later on
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Policies:
      - PolicyName: SignedUrlExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Join
                - ''
                - - !GetAtt
                    - SignedUrlBucket
                    - Arn
                  - '/*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ''
                - - !GetAtt
                    - SignedUrlBucket
                    - Arn
                  - '/*'
FileChunkerRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: FileChunkerRole # required while using 'serverless deploy --function' later on
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Policies:
      - PolicyName: FileChunkerExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Join
                - ''
                - - !GetAtt
                    - HydrationChunksBucket
                    - Arn
                  - '/*'
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ''
                - - !GetAtt
                    - HydrationMainBucket
                    - Arn
                  - '/*'
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: arn:aws:s3:::*
            - Effect: Allow
              Action:
                - states:DescribeStateMachine
                - states:DescribeExecution
                - states:ListExecutions
                - states:StartExecution
                - states:StopExecution
                - states:StartSyncExecution
              Resource:
                # - arn:aws:states:${!Ref AWS::Region}:${!Ref AWS::AccountId}:express:*:*:*
                - !Join
                  - ':'
                  - - 'arn:aws:states'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'express:*:*:*'
                - !Join
                  - ':'
                  - - 'arn:aws:states'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'execution:*:*'
                - !Join
                  - ':'
                  - - 'arn:aws:states'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'stateMachine:*'
                - !Join
                  - ':'
                  - - 'arn:aws:states'
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'mapRun:*/*:*'
            - Effect: Allow
              Action:
                - states:SendTaskSuccess
                - states:SendTaskFailure
                - states:SendTaskHeartbeat
              Resource: '*'
ChunkLoaderRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ChunkLoaderRole # required while using 'serverless deploy --function' later on
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Policies:
      - PolicyName: ChunkLoaderExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
              Resource: !GetAtt
                - HydrationQueue
                - Arn
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ''
                - - !GetAtt
                    - HydrationChunksBucket
                    - Arn
                  - '/*'
ChunkProcessorRole:
  Type: AWS::IAM::Role
  Properties:
    RoleName: ChunkProcessorRole # required while using 'serverless deploy --function' later on
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action: sts:AssumeRole
    # note that these rights are needed if you want your function to be able to communicate with resources within your vpc
    ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
    Policies:
      - PolicyName: ChunkProcessorExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: !GetAtt
                - HydrationQueue
                - Arn
            - Effect: Allow
              Action:
                - dynamodb:BatchGetItem
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:BatchWriteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
              Resource: !GetAtt
                - HydrationTable
                - Arn
HydrationMainBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_MAIN_BUCKET}
    VersioningConfiguration:
      Status: Enabled
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
    CorsConfiguration:
      CorsRules:
        - AllowedHeaders:
            - '*'
          AllowedMethods:
            - GET
            - PUT
          AllowedOrigins: !Split
            - ','
            - ${self:custom.environment.${opt:stage, self:provider.stage}.ALLOWED_ORIGINS}
          # ExposedHeaders:
          #   - Connection
          #   - Server
          #   - Date
          MaxAge: 1800
HydrationMainBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref HydrationMainBucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Action:
            - s3:PutObject
            - s3:GetObject
          Effect: Allow
          Resource: !Join
            - ''
            - - !GetAtt
                - HydrationMainBucket
                - Arn
              - '/*'
          Principal: '*'
          Condition:
            StringLike:
              'aws:Referer': !Split
                - ','
                - ${self:custom.environment.${opt:stage, self:provider.stage}.ALLOWED_ORIGINS}
HydrationChunksBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_CHUNKS_BUCKET}
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
HydrationChunksBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref HydrationChunksBucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Action:
            - s3:PutObject
            - s3:GetObject
          Effect: Allow
          Resource: !Join
            - ''
            - - !GetAtt
                - HydrationChunksBucket
                - Arn
              - '/*'
          Principal:
            AWS:
              - !GetAtt
                - FileChunkerRole
                - Arn
              - !GetAtt
                - ChunkLoaderRole
                - Arn
SignedUrlBucket:
  Type: AWS::S3::Bucket
  Properties:
    BucketName: ${self:custom.environment.${opt:stage, self:provider.stage}.SIGNED_URL_TEST_BUCKET}
    PublicAccessBlockConfiguration:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
SignedUrlBucketPolicy:
  Type: AWS::S3::BucketPolicy
  Properties:
    Bucket: !Ref SignedUrlBucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Action:
            - s3:PutObject
            - s3:GetObject
          Effect: Allow
          Resource: !Join
            - ''
            - - !GetAtt
                - SignedUrlBucket
                - Arn
              - '/*'
          Principal:
            AWS: !GetAtt
              - SignedUrlRole
              - Arn
HydrationQueue:
  Type: AWS::SQS::Queue
  Properties:
    QueueName: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_QUEUE}
    ReceiveMessageWaitTimeSeconds: 1
    MessageRetentionPeriod: 1209600
    VisibilityTimeout: 60
HydrationQueuePolicy:
  Type: AWS::SQS::QueuePolicy
  Properties:
    Queues:
      - !GetAtt
        - HydrationQueue
        - QueueUrl
    PolicyDocument:
      Statement:
        - Action:
            - SQS:SendMessage
            - SQS:ReceiveMessage
            - SQS:DeleteMessage
            - SQS:GetQueueAttributes
          Effect: Allow
          Resource: !GetAtt
            - HydrationQueue
            - Arn
          Principal:
            AWS: !GetAtt
              - ChunkProcessorRole
              - Arn
HydrationCluster:
  Type: 'AWS::DocDB::DBCluster'
  Properties:
    DBClusterIdentifier: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_CLUSTER}
    MasterUsername: ${self:custom.environment.${opt:stage, self:provider.stage}.DB_MASTER_USERNAME}
    MasterUserPassword: ${self:custom.environment.${opt:stage, self:provider.stage}.DB_MASTER_PASSWORD}
    DBClusterParameterGroupName: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_CLUSTER_PARAMETER_GROUP}
HydrationInstance:
  Type: 'AWS::DocDB::DBInstance'
  Properties:
    DBClusterIdentifier: !Ref HydrationCluster
    DBInstanceIdentifier: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_INSTANCE}
    DBInstanceClass: ${self:custom.environment.${opt:stage, self:provider.stage}.DB_INSTANCE_CLASS}
  DependsOn: HydrationCluster
HydrationTable:
  Type: AWS::DynamoDB::Table
  Properties:
    AttributeDefinitions:
      - AttributeName: fileName
        AttributeType: N
      - AttributeName: timestamp
        AttributeType: N
      - AttributeName: uuid
        AttributeType: S
      - AttributeName: member_code
        AttributeType: S
    KeySchema:
      - AttributeName: fileName
        KeyType: HASH
      - AttributeName: timestamp
        KeyType: RANGE
    # ProvisionedThroughput:
    #   ReadCapacityUnits: 0
    #   WriteCapacityUnits: 0
    BillingMode: PAY_PER_REQUEST
    TableName: ${self:custom.environment.${opt:stage, self:provider.stage}.HYDRATION_TABLE}
    LocalSecondaryIndexes:
      - IndexName: 'uuid-secondary-index'
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH
          - AttributeName: uuid
            KeyType: RANGE
        Projection:
          NonKeyAttributes:
            - member_code
            - timestamp
          ProjectionType: INCLUDE
      - IndexName: 'member_code-secondary-index'
        KeySchema:
          - AttributeName: fileName
            KeyType: HASH
          - AttributeName: member_code
            KeyType: RANGE
        Projection:
          NonKeyAttributes:
            - uuid
            - timestamp
          ProjectionType: INCLUDE
